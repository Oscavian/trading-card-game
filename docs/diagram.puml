@startuml

class Game {
    + register()
    + login()
    + showScoreboard()
}

class Scoreboard {
    - users : Map<username, elo>
    - mostWins : User
    - mostLoses : User

    resetScoreboard()
}

class User {
    - username : String
    - password : String
    - elo : int
    + User()
    + setPassword()
    + getUsername()
    + createDeck()
    + viewStack()
    + gotoStore()
    + trade()

}

abstract class CardBase {
    - name : String
    - damage : final int
    - element : Element
    __Methods__
    CardBase(String name, Element element, int damage)
    {abstract} void attack()
}

class CardSpell {
    + CardSpell(String name, Element element, int damage)
    + void attack()
}

class CardMonster {
    + CardMonster(String name, Element element, int damage)
    + void attack()
}

note top of Stack : Collection of current cards
class Stack {
    - cards : ArrayList<CardBase>
}

note top of Deck : Used in battles, consists of 4 cards
class Deck {
    - cards : ArrayList<CardBase>
}

note top of Package : can be bought, consists of 5 cards
class Package {
    - cards : ArrayList<CardBase>
    - price : int
    + buy()
}

class Battle {
    - player1 : User
    - player2 : User
    - rounds : int

    play()
}

class Shop {
    packages : ArrayList<Package>
}

class DataHandler {

}



enum Element {
    WATER
    FIRE
    NORMAL
}

enum AttackModifier {
    EFFECTIVE
    NOT_EFFECTIVE
    NO_EFFECT
}

enum BattleResult {
    WIN
    LOSE
    DRAW
}

CardBase <|-- CardSpell
CardBase <|-- CardMonster

Stack "1" --- "1" User
CardBase --- Element

AttackModifier --- CardSpell
BattleResult --- Battle
Game --- Scoreboard
Game --- User

Deck "*" --o "1" User
Deck "1" o-- "*" CardBase
Package "1" o-- "*" CardBase
Stack "1" o-- "*" CardBase
Battle "1" o-- "*" User


@enduml